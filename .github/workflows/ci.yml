name: ci-cd

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  IMAGE_NAME: "s1natex/my-devops-cicd-demo"
  AWS_REGION: "eu-north-1"
  EC2_NAME: "my-devops-cicd-demo-ec2"

concurrency:
  group: "deploy-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  test:
    name: "Test (API + Frontend)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "${{ env.PYTHON_VERSION }}"
      - name: Install deps (API + tests)
        run: |
          if [ -f app/api/requirements.txt ]; then pip install -r app/api/requirements.txt; fi
          pip install pytest beautifulsoup4 httpx
      - name: Run tests
        run: pytest -q app/api/test_api.py app/frontend/test_frontend.py

  build-and-push:
    if: ${{ github.event_name != 'pull_request' }}
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta (API)
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: "${{ env.IMAGE_NAME }}"
          flavor: |
            latest=false
          tags: |
            type=raw,value=api-${{ github.ref_name }}-${{ github.sha.substring(0,7) }},enable=${{ github.ref_type == 'branch' }}
            type=raw,value=api-{{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }},prefix=,suffix=
            type=raw,value=api-latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Build & push (API)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: app/api/Dockerfile
          push: true
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker meta (WEB)
        id: meta_web
        uses: docker/metadata-action@v5
        with:
          images: "${{ env.IMAGE_NAME }}"
          flavor: |
            latest=false
          tags: |
            type=raw,value=web-${{ github.ref_name }}-${{ github.sha.substring(0,7) }},enable=${{ github.ref_type == 'branch' }}
            type=raw,value=web-{{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }},prefix=,suffix=
            type=raw,value=web-latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Build & push (WEB)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: app/frontend/Dockerfile
          push: true
          tags: ${{ steps.meta_web.outputs.tags }}
          labels: ${{ steps.meta_web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-ec2:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    environment:
      name: production
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::485701710361:role/my-devops-cicd-demo-gha-oidc"
          aws-region: "${{ env.AWS_REGION }}"

      - name: Find instance by Name tag and check SSM
        id: find
        shell: bash
        run: |
          set -euo pipefail
          IID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${EC2_NAME}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -z "$IID" ]; then
            echo "No running instance found with Name=${EC2_NAME}" >&2
            exit 1
          fi
          MI=$(aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$IID" \
            --query "InstanceInformationList[].InstanceId" --output text || true)
          if [ "$MI" != "$IID" ]; then
            echo "Instance $IID is not managed by SSM." >&2
            exit 1
          fi
          echo "iid=$IID" >> "$GITHUB_OUTPUT"

      - name: Update containers via SSM (pull & up -d)
        shell: bash
        run: |
          set -euo pipefail
          IID="${{ steps.find.outputs.iid }}"
          CMD_ID=$(aws ssm send-command \
            --instance-ids "$IID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["docker compose -f /opt/compose/docker-compose.yml pull","docker compose -f /opt/compose/docker-compose.yml up -d","docker image prune -f"]' \
            --query "Command.CommandId" --output text)
          for i in $(seq 1 40); do
            STATUS=$(aws ssm get-command-invocation --instance-id "$IID" --command-id "$CMD_ID" --query "Status" --output text || echo "Pending")
            echo "SSM status: $STATUS"
            case "$STATUS" in
              Success) break ;;
              Failed|TimedOut|Cancelled|Cancelling) echo "Command $STATUS"; exit 1 ;;
            esac
            sleep 10
          done

      - name: Smoke test endpoints
        shell: bash
        run: |
          set -euo pipefail
          IP=$(aws ec2 describe-instances --instance-ids "${{ steps.find.outputs.iid }}" --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "Public IP: $IP"
          curl -fsS "http://$IP:8000/tasks" | jq .
          curl -fsSI "http://$IP:8080/" | head -n 1
