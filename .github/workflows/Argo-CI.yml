name: Argo-CI

on:
  pull_request:
    branches:
      - main
    paths:
      - 'app/**'
      - 'argo/**'
      - 'k8s/**'
      - 'terraform/**'
      - 'tests/**'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: write

env:
  IMAGE: s1natex/my-devops-cicd-demo
  DEPLOYMENT_FILE: k8s/deployment.yaml
  TARGET_BRANCH: ${{ github.head_ref || github.ref_name }}

jobs:
  tests-unit-integration:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            app/requirements.txt
            requirements-dev.txt
      - run: pip install -r app/requirements.txt -r requirements-dev.txt
      - run: PYTHONPATH=. pytest tests/unit tests/integration -q

  tests-e2e:
    if: github.actor != 'github-actions[bot]'
    name: e2e on docker compose
    runs-on: ubuntu-latest
    needs: tests-unit-integration
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            app/requirements.txt
            requirements-dev.txt
      - run: pip install -r requirements-dev.txt
      - uses: docker/setup-buildx-action@v3
      - name: Build & start services (compose)
        run: docker compose up -d --build
      - name: Wait for app
        run: |
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:8000/ >/dev/null; then
              exit 0
            fi
            sleep 2
          done
          docker compose ps; exit 1
      - name: Run e2e tests
        env:
          PYTHONPATH: .
          COMPOSE_E2E: "1"
        run: pytest tests/e2e -q
      - name: Show compose logs (always)
        if: always()
        run: docker compose logs --no-color --timestamps
      - name: Tear down
        if: always()
        run: docker compose down -v

  build-push-and-bump-manifests:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    needs: [tests-unit-integration, tests-e2e]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.TARGET_BRANCH }}

      - name: Compute tag
        id: tag
        run: |
          DATE=$(date +%Y%m%d)
          GIT_SHA=${GITHUB_SHA::7}
          echo "TAG=${DATE}-${GIT_SHA}" >> $GITHUB_OUTPUT

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push image
        run: |
          docker build -t $IMAGE:${{ steps.tag.outputs.TAG }} ./app
          docker push $IMAGE:${{ steps.tag.outputs.TAG }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Update deployment image tag
        env:
          IMG: ${{ env.IMAGE }}
          TAG: ${{ steps.tag.outputs.TAG }}
        run: |
          yq -i '.spec.template.spec.containers |= map(.image = strenv(IMG) + ":" + strenv(TAG))' "$DEPLOYMENT_FILE"
          git status --porcelain

      - name: Commit and push manifest change to branch
        run: |
          git config user.name  "ManifestUpdater[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$DEPLOYMENT_FILE"
          if git diff --cached --quiet; then
            echo "No manifest changes"; exit 0
          fi
          git commit -m "chore(argocd): bump image to $IMAGE:${{ steps.tag.outputs.TAG }}"
          git push origin HEAD:${{ env.TARGET_BRANCH }}
