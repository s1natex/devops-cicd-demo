name: Argo-CI

on:
  push:
    branches: [dev]
  workflow_dispatch:

permissions:
  contents: read

env:
  IMAGE: s1natex/my-devops-cicd-demo

jobs:
  tests-unit-integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            app/requirements.txt
            requirements-dev.txt
      - run: pip install -r app/requirements.txt -r requirements-dev.txt
      - run: PYTHONPATH=. pytest tests/unit tests/integration -q

  tests-e2e:
    name: e2e on docker compose
    runs-on: ubuntu-latest
    needs: tests-unit-integration
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            app/requirements.txt
            requirements-dev.txt
      - run: pip install -r requirements-dev.txt
      - uses: docker/setup-buildx-action@v3
      - name: Build & start services (compose)
        run: docker compose up -d --build
      - name: Wait for app
        run: |
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:8000/ >/dev/null; then
              echo "App is up"; exit 0
            fi
            echo "Waiting for app... ($i/30)"; sleep 2
          done
          echo "App failed to start in time"; docker compose ps; exit 1
      - name: Run e2e tests
        env:
          PYTHONPATH: .
          COMPOSE_E2E: "1"
        run: pytest tests/e2e -q
      - name: Show compose logs (always)
        if: always()
        run: docker compose logs --no-color --timestamps
      - name: Tear down
        if: always()
        run: docker compose down -v

  build-push:
    runs-on: ubuntu-latest
    needs: [tests-unit-integration, tests-e2e]
    steps:
      - uses: actions/checkout@v4

      - name: Compute tag
        id: tag
        run: |
          DATE=$(date +%Y%m%d)
          GIT_SHA=${GITHUB_SHA::7}
          echo "TAG=${DATE}-${GIT_SHA}" >> $GITHUB_OUTPUT

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push image
        env:
          IMAGE: ${{ env.IMAGE }}
        run: |
          docker build -t $IMAGE:${{ steps.tag.outputs.TAG }} ./app
          docker push $IMAGE:${{ steps.tag.outputs.TAG }}

      - name: Save image tag artifact
        run: |
          echo "${{ env.IMAGE }}" > image.txt
          echo "${{ steps.tag.outputs.TAG }}" > tag.txt
        shell: bash

      - name: Upload artifact (image + tag)
        uses: actions/upload-artifact@v4
        with:
          name: image-info
          path: |
            image.txt
            tag.txt
